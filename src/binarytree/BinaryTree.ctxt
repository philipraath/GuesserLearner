#BlueJ class context
comment0.params=
comment0.target=BinaryTree()
comment0.text=Construct\ an\ empty\ BinaryTree
comment1.params=root
comment1.target=BinaryTree(BinaryTree.Node)
comment1.text=\n\ Construct\ a\ BinaryTree\ with\ a\ specified\ root.\n\ Should\ only\ be\ used\ by\ subclasses.\n\ @param\ root\ The\ node\ that\ is\ the\ root\ of\ the\ tree.\n
comment10.params=
comment10.target=java.lang.String\ postorderToString()
comment10.text=\n\ Method\ to\ return\ the\ postorder\ traversal\ of\ the\ binary\ tree\n\ as\ a\ sequence\ of\ strings\ each\ separated\ by\ a\ space.\n\ @return\ A\ postorder\ traversal\ as\ a\ string\n
comment11.params=sb\ cur
comment11.target=void\ postorderToString(java.lang.StringBuilder,\ BinaryTree.Node)
comment12.params=
comment12.target=java.lang.String\ inorderToString()
comment12.text=\n\ Method\ to\ return\ the\ inorder\ traversal\ of\ the\ binary\ tree\n\ as\ a\ sequence\ of\ strings\ each\ separated\ by\ a\ space.\n\ @return\ an\ inorder\ traversal\ as\ a\ string\n
comment13.params=sb\ cur
comment13.target=void\ inorderToString(java.lang.StringBuilder,\ BinaryTree.Node)
comment14.params=
comment14.target=java.lang.String\ levelwiseToString()
comment14.text=\n\ Method\ to\ return\ the\ level-by-level\ traversal\ of\ the\ binary\ tree\n\ as\ a\ sequence\ of\ strings\ each\ separated\ by\ a\ space\n\ @return\ levelwise\ traversal\ as\ a\ string\n
comment15.params=
comment15.target=int\ countNodes()
comment15.text=\ \n\ Method\ to\ count\ the\ number\ of\ nodes\ in\ the\ tree\n\ @return\ the\ number\ of\ nodes\ contained\ in\ the\ tree\n
comment16.params=cur
comment16.target=int\ countNodes(BinaryTree.Node)
comment17.params=
comment17.target=int\ getHeight()
comment17.text=\ \n\ Method\ to\ count\ the\ height\ in\ the\ tree,\ a\ null\ tree\ has\ height\ 0\ \n\ @return\ the\ number\ of\ levels\ of\ the\ tree\n
comment18.params=cur
comment18.target=int\ height(BinaryTree.Node)
comment2.params=data\ leftTree\ rightTree
comment2.target=BinaryTree(java.lang.Object,\ BinaryTree,\ BinaryTree)
comment2.text=\n\ Constructs\ a\ new\ binary\ tree\ with\ data\ in\ its\ root,leftTree\n\ as\ its\ left\ subtree\ and\ rightTree\ as\ its\ right\ subtree.\n
comment3.params=
comment3.target=BinaryTree\ getLeftSubtree()
comment3.text=\n\ Return\ the\ left\ subtree.\n\ @return\ The\ left\ subtree\ or\ null\ if\ either\ the\ root\ or\n\ the\ left\ subtree\ is\ null\n
comment4.params=
comment4.target=BinaryTree\ getRightSubtree()
comment4.text=\n\ Return\ the\ right\ sub-tree\n\ @return\ the\ right\ sub-tree\ or\n\ \ \ \ \ \ \ \ \ null\ if\ either\ the\ root\ or\ the\n\ \ \ \ \ \ \ \ \ right\ subtree\ is\ null.\n
comment5.params=
comment5.target=java.lang.Object\ getData()
comment5.text=\n\ Return\ the\ data\ field\ of\ the\ root\n\ @return\ the\ data\ field\ of\ the\ root\n\ \ \ \ \ \ \ \ \ or\ null\ if\ the\ root\ is\ null\n
comment6.params=
comment6.target=boolean\ isLeaf()
comment6.text=\n\ Determine\ whether\ this\ tree\ is\ a\ leaf.\n\ @return\ true\ if\ the\ root\ has\ no\ children\n
comment7.params=
comment7.target=java.lang.String\ toString()
comment8.params=
comment8.target=java.lang.String\ preorderToString()
comment8.text=\n\ Method\ to\ return\ the\ preorder\ traversal\ of\ the\ binary\ tree\n\ as\ a\ sequence\ of\ strings\ each\ separated\ by\ a\ space.\n\ @return\ A\ preorder\ traversal\ as\ a\ string\n
comment9.params=sb\ cur
comment9.target=void\ preorderToString(java.lang.StringBuilder,\ BinaryTree.Node)
numComments=19
